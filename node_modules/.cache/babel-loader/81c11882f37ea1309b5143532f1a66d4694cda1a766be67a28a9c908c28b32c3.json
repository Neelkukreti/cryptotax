{"ast":null,"code":"var _jsxFileName = \"/Users/neel/Documents/Tax calculator/taxcalc/crypto-tax-calculator/src/components/UploadTransactions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { Button, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Box } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadTransactions = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n\n  // Function to handle file upload and read Excel data\n  const handleFileUpload = event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (!file) {\n      console.error(\"No file selected\");\n      return;\n    }\n    const reader = new FileReader();\n\n    // Callback when file is loaded\n    reader.onload = e => {\n      var _e$target;\n      const binaryStr = (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.result;\n      if (typeof binaryStr === 'string') {\n        // Parse the workbook\n        const workbook = XLSX.read(binaryStr, {\n          type: 'binary'\n        });\n\n        // Read the first sheet\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n\n        // Convert sheet to JSON (2D array)\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n          header: 1\n        });\n\n        // Process and map data into a usable format\n        const transactions = processExcelData(jsonData);\n        console.log(\"Parsed Transactions:\", transactions);\n\n        // Save data to state for display\n        setTransactions(transactions);\n      }\n    };\n\n    // Read the file as binary string\n    reader.readAsBinaryString(file);\n  };\n\n  // Helper function to process Excel data\n  const processExcelData = jsonData => {\n    const [headers, ...rows] = jsonData;\n    if (!headers || headers.length === 0) {\n      console.error(\"Invalid file format: Missing headers\");\n      return [];\n    }\n\n    // Capitalize first letter of headers and remove spaces\n    const formattedHeaders = headers.map(header => {\n      if (typeof header === 'string') {\n        return header.trim().charAt(0).toUpperCase() + header.trim().slice(1);\n      }\n      return header;\n    });\n\n    // Map rows to objects using the formatted headers\n    const transactions = rows.map(row => {\n      const transaction = {};\n      formattedHeaders.forEach((header, index) => {\n        transaction[header] = row[index] || ''; // Assign empty string if data is missing\n      });\n      return transaction;\n    });\n    return transactions;\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      padding: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      align: \"center\",\n      children: \"Upload Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        textAlign: 'center',\n        marginBottom: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        component: \"label\",\n        color: \"primary\",\n        sx: {\n          padding: '10px 20px',\n          fontSize: '16px'\n        },\n        children: [\"Choose File\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".xlsx, .xls\",\n          hidden: true,\n          onChange: handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), transactions.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        marginTop: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        align: \"center\",\n        children: \"Uploaded Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n        component: Paper,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          sx: {\n            minWidth: 650\n          },\n          \"aria-label\": \"transaction table\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: Object.keys(transactions[0]).map(key => /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: key\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: transactions.map((transaction, idx) => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: Object.values(transaction).map((value, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: String(value)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 23\n              }, this))\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadTransactions, \"Tz1qIkShCHvLh/M7ZupqdoMUajU=\");\n_c = UploadTransactions;\nexport default UploadTransactions;\nvar _c;\n$RefreshReg$(_c, \"UploadTransactions\");","map":{"version":3,"names":["React","useState","XLSX","Button","Typography","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Box","jsxDEV","_jsxDEV","UploadTransactions","_s","transactions","setTransactions","handleFileUpload","event","_event$target$files","file","target","files","console","error","reader","FileReader","onload","e","_e$target","binaryStr","result","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","processExcelData","log","readAsBinaryString","headers","rows","length","formattedHeaders","map","trim","charAt","toUpperCase","slice","row","transaction","forEach","index","sx","padding","children","variant","gutterBottom","align","fileName","_jsxFileName","lineNumber","columnNumber","textAlign","marginBottom","component","color","fontSize","accept","hidden","onChange","marginTop","minWidth","Object","keys","key","idx","values","value","String","_c","$RefreshReg$"],"sources":["/Users/neel/Documents/Tax calculator/taxcalc/crypto-tax-calculator/src/components/UploadTransactions.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { Button, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Box } from '@mui/material';\n\nconst UploadTransactions = () => {\n  const [transactions, setTransactions] = useState<any[]>([]);\n\n  // Function to handle file upload and read Excel data\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n\n    if (!file) {\n      console.error(\"No file selected\");\n      return;\n    }\n\n    const reader = new FileReader();\n\n    // Callback when file is loaded\n    reader.onload = (e) => {\n      const binaryStr = e.target?.result;\n      if (typeof binaryStr === 'string') {\n        // Parse the workbook\n        const workbook = XLSX.read(binaryStr, { type: 'binary' });\n\n        // Read the first sheet\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n\n        // Convert sheet to JSON (2D array)\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];\n\n        // Process and map data into a usable format\n        const transactions = processExcelData(jsonData);\n        console.log(\"Parsed Transactions:\", transactions);\n\n        // Save data to state for display\n        setTransactions(transactions);\n      }\n    };\n\n    // Read the file as binary string\n    reader.readAsBinaryString(file);\n  };\n\n  // Helper function to process Excel data\n  const processExcelData = (jsonData: any[][]): any[] => {\n    const [headers, ...rows] = jsonData;\n\n    if (!headers || headers.length === 0) {\n      console.error(\"Invalid file format: Missing headers\");\n      return [];\n    }\n\n    // Capitalize first letter of headers and remove spaces\n    const formattedHeaders = headers.map((header: any) => {\n      if (typeof header === 'string') {\n        return header.trim().charAt(0).toUpperCase() + header.trim().slice(1);\n      }\n      return header;\n    });\n\n    // Map rows to objects using the formatted headers\n    const transactions = rows.map((row) => {\n      const transaction: Record<string, any> = {};\n      formattedHeaders.forEach((header, index) => {\n        transaction[header] = row[index] || ''; // Assign empty string if data is missing\n      });\n      return transaction;\n    });\n\n    return transactions;\n  };\n\n  return (\n    <Box sx={{ padding: 3 }}>\n      <Typography variant=\"h4\" gutterBottom align=\"center\">\n        Upload Transactions\n      </Typography>\n\n      {/* Upload Button */}\n      <Box sx={{ textAlign: 'center', marginBottom: 3 }}>\n        <Button\n          variant=\"contained\"\n          component=\"label\"\n          color=\"primary\"\n          sx={{ padding: '10px 20px', fontSize: '16px' }}\n        >\n          Choose File\n          <input\n            type=\"file\"\n            accept=\".xlsx, .xls\"\n            hidden\n            onChange={handleFileUpload}\n          />\n        </Button>\n      </Box>\n\n      {/* Display Table if there are transactions */}\n      {transactions.length > 0 && (\n        <Box sx={{ marginTop: 4 }}>\n          <Typography variant=\"h5\" gutterBottom align=\"center\">\n            Uploaded Transactions\n          </Typography>\n\n          {/* Table Container */}\n          <TableContainer component={Paper}>\n            <Table sx={{ minWidth: 650 }} aria-label=\"transaction table\">\n              <TableHead>\n                <TableRow>\n                  {Object.keys(transactions[0]).map((key) => (\n                    <TableCell key={key} align=\"center\">{key}</TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {transactions.map((transaction, idx) => (\n                  <TableRow key={idx}>\n                    {Object.values(transaction).map((value, index) => (\n                      <TableCell key={index} align=\"center\">{String(value)}</TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default UploadTransactions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}