{"ast":null,"code":"import express from \"express\";\nimport mongoose from \"mongoose\";\nimport cors from \"cors\";\nimport dotenv from \"dotenv\";\ndotenv.config();\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\n// MongoDB Connection\nmongoose.connect(process.env.MONGO_URI || \"\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"MongoDB connected\")).catch(err => console.error(err));\n\n// User Schema\n\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: String,\n  calculations: Array\n});\nconst User = mongoose.model(\"User\", userSchema);\n\n// Routes\napp.post(\"/api/user\", async (req, res) => {\n  const {\n    name,\n    email\n  } = req.body;\n  let user = await User.findOne({\n    email\n  });\n  if (!user) {\n    user = new User({\n      name,\n      email,\n      calculations: []\n    });\n    await user.save();\n  }\n  res.json(user);\n});\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["express","mongoose","cors","dotenv","config","app","use","json","connect","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","userSchema","Schema","name","String","email","calculations","Array","User","model","post","req","res","body","user","findOne","save","PORT","listen"],"sources":["/Users/neel/Documents/Tax calculator/taxcalc/crypto-tax-calculator/src/index.tsx"],"sourcesContent":["import express, { Application, Request, Response } from \"express\";\nimport mongoose from \"mongoose\";\nimport cors from \"cors\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst app: Application = express();\napp.use(cors());\napp.use(express.json());\n\n// MongoDB Connection\nmongoose\n  .connect(process.env.MONGO_URI || \"\", { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log(\"MongoDB connected\"))\n  .catch((err) => console.error(err));\n\n// User Schema\ninterface IUser {\n  name: string;\n  email: string;\n  calculations: Array<any>;\n}\n\nconst userSchema = new mongoose.Schema<IUser>({\n  name: String,\n  email: String,\n  calculations: Array,\n});\n\nconst User = mongoose.model<IUser>(\"User\", userSchema);\n\n// Routes\napp.post(\"/api/user\", async (req: Request, res: Response) => {\n  const { name, email } = req.body;\n  let user = await User.findOne({ email });\n  if (!user) {\n    user = new User({ name, email, calculations: [] });\n    await user.save();\n  }\n  res.json(user);\n});\n\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n"],"mappings":"AAAA,OAAOA,OAAO,MAA0C,SAAS;AACjE,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,QAAQ;AAE3BA,MAAM,CAACC,MAAM,CAAC,CAAC;AAEf,MAAMC,GAAgB,GAAGL,OAAO,CAAC,CAAC;AAClCK,GAAG,CAACC,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC;AACfG,GAAG,CAACC,GAAG,CAACN,OAAO,CAACO,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACAN,QAAQ,CACLO,OAAO,CAACC,OAAO,CAACC,GAAG,CAACC,SAAS,IAAI,EAAE,EAAE;EAAEC,eAAe,EAAE,IAAI;EAAEC,kBAAkB,EAAE;AAAK,CAAC,CAAC,CACzFC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAC5CC,KAAK,CAAEC,GAAG,IAAKH,OAAO,CAACI,KAAK,CAACD,GAAG,CAAC,CAAC;;AAErC;;AAOA,MAAME,UAAU,GAAG,IAAInB,QAAQ,CAACoB,MAAM,CAAQ;EAC5CC,IAAI,EAAEC,MAAM;EACZC,KAAK,EAAED,MAAM;EACbE,YAAY,EAAEC;AAChB,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAG1B,QAAQ,CAAC2B,KAAK,CAAQ,MAAM,EAAER,UAAU,CAAC;;AAEtD;AACAf,GAAG,CAACwB,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAY,EAAEC,GAAa,KAAK;EAC3D,MAAM;IAAET,IAAI;IAAEE;EAAM,CAAC,GAAGM,GAAG,CAACE,IAAI;EAChC,IAAIC,IAAI,GAAG,MAAMN,IAAI,CAACO,OAAO,CAAC;IAAEV;EAAM,CAAC,CAAC;EACxC,IAAI,CAACS,IAAI,EAAE;IACTA,IAAI,GAAG,IAAIN,IAAI,CAAC;MAAEL,IAAI;MAAEE,KAAK;MAAEC,YAAY,EAAE;IAAG,CAAC,CAAC;IAClD,MAAMQ,IAAI,CAACE,IAAI,CAAC,CAAC;EACnB;EACAJ,GAAG,CAACxB,IAAI,CAAC0B,IAAI,CAAC;AAChB,CAAC,CAAC;AAEF,MAAMG,IAAI,GAAG3B,OAAO,CAACC,GAAG,CAAC0B,IAAI,IAAI,IAAI;AACrC/B,GAAG,CAACgC,MAAM,CAACD,IAAI,EAAE,MAAMrB,OAAO,CAACC,GAAG,CAAC,0BAA0BoB,IAAI,EAAE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}