{"ast":null,"code":"var _jsxFileName = \"/Users/neel/Documents/Tax calculator/taxcalc/crypto-tax-calculator/src/components/UploadTransactions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadTransactions = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n\n  // Function to handle file upload and read Excel data\n  const handleFileUpload = event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (!file) {\n      console.error(\"No file selected\");\n      return;\n    }\n    const reader = new FileReader();\n\n    // Callback when file is loaded\n    reader.onload = e => {\n      var _e$target;\n      const binaryStr = (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.result;\n      if (typeof binaryStr === 'string') {\n        // Parse the workbook\n        const workbook = XLSX.read(binaryStr, {\n          type: 'binary'\n        });\n\n        // Read the first sheet\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n\n        // Convert sheet to JSON (2D array)\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n          header: 1\n        });\n\n        // Process and map data into a usable format\n        const transactions = processExcelData(jsonData);\n        console.log(\"Parsed Transactions:\", transactions);\n\n        // Save data to state for display\n        setTransactions(transactions);\n      }\n    };\n\n    // Read the file as binary string\n    reader.readAsBinaryString(file);\n  };\n\n  // Helper function to process Excel data\n  const processExcelData = jsonData => {\n    const [headers, ...rows] = jsonData;\n    if (!headers || headers.length === 0) {\n      console.error(\"Invalid file format: Missing headers\");\n      return [];\n    }\n\n    // Capitalize first letter of headers and remove spaces\n    const formattedHeaders = headers.map(header => {\n      if (typeof header === 'string') {\n        return header.trim().charAt(0).toUpperCase() + header.trim().slice(1);\n      }\n      return header;\n    });\n\n    // Map rows to objects using the formatted headers\n    const transactions = rows.map(row => {\n      const transaction = {};\n      formattedHeaders.forEach((header, index) => {\n        transaction[header] = row[index] || ''; // Assign empty string if data is missing\n      });\n      return transaction;\n    });\n    return transactions;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".xlsx, .xls\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), transactions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Uploaded Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: Object.keys(transactions[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: key\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: transactions.map((transaction, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: Object.values(transaction).map((value, index) =>\n            /*#__PURE__*/\n            // Ensure that value is a valid React renderable element\n            _jsxDEV(\"td\", {\n              children: String(value)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 21\n            }, this))\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadTransactions, \"Tz1qIkShCHvLh/M7ZupqdoMUajU=\");\n_c = UploadTransactions;\nexport default UploadTransactions;\nvar _c;\n$RefreshReg$(_c, \"UploadTransactions\");","map":{"version":3,"names":["React","useState","XLSX","jsxDEV","_jsxDEV","UploadTransactions","_s","transactions","setTransactions","handleFileUpload","event","_event$target$files","file","target","files","console","error","reader","FileReader","onload","e","_e$target","binaryStr","result","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","processExcelData","log","readAsBinaryString","headers","rows","length","formattedHeaders","map","trim","charAt","toUpperCase","slice","row","transaction","forEach","index","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","Object","keys","key","idx","values","value","String","_c","$RefreshReg$"],"sources":["/Users/neel/Documents/Tax calculator/taxcalc/crypto-tax-calculator/src/components/UploadTransactions.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\n\nconst UploadTransactions = () => {\n  const [transactions, setTransactions] = useState<any[]>([]);\n\n  // Function to handle file upload and read Excel data\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n\n    if (!file) {\n      console.error(\"No file selected\");\n      return;\n    }\n\n    const reader = new FileReader();\n\n    // Callback when file is loaded\n    reader.onload = (e) => {\n      const binaryStr = e.target?.result;\n      if (typeof binaryStr === 'string') {\n        // Parse the workbook\n        const workbook = XLSX.read(binaryStr, { type: 'binary' });\n\n        // Read the first sheet\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n\n        // Convert sheet to JSON (2D array)\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];\n\n        // Process and map data into a usable format\n        const transactions = processExcelData(jsonData);\n        console.log(\"Parsed Transactions:\", transactions);\n\n        // Save data to state for display\n        setTransactions(transactions);\n      }\n    };\n\n    // Read the file as binary string\n    reader.readAsBinaryString(file);\n  };\n\n  // Helper function to process Excel data\n  const processExcelData = (jsonData: any[][]): any[] => {\n    const [headers, ...rows] = jsonData;\n\n    if (!headers || headers.length === 0) {\n      console.error(\"Invalid file format: Missing headers\");\n      return [];\n    }\n\n    // Capitalize first letter of headers and remove spaces\n    const formattedHeaders = headers.map((header: any) => {\n      if (typeof header === 'string') {\n        return header.trim().charAt(0).toUpperCase() + header.trim().slice(1);\n      }\n      return header;\n    });\n\n    // Map rows to objects using the formatted headers\n    const transactions = rows.map((row) => {\n      const transaction: Record<string, any> = {};\n      formattedHeaders.forEach((header, index) => {\n        transaction[header] = row[index] || ''; // Assign empty string if data is missing\n      });\n      return transaction;\n    });\n\n    return transactions;\n  };\n\n  return (\n    <div>\n      <h2>Upload Transactions</h2>\n\n      {/* Upload Button */}\n      <input\n        type=\"file\"\n        accept=\".xlsx, .xls\"\n        onChange={handleFileUpload}\n      />\n      \n      {/* Display Table if there are transactions */}\n      {transactions.length > 0 && (\n        <div>\n          <h3>Uploaded Transactions</h3>\n          <table>\n            <thead>\n              <tr>\n                {Object.keys(transactions[0]).map((key) => (\n                  <th key={key}>{key}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {transactions.map((transaction, idx) => (\n                <tr key={idx}>\n                  {Object.values(transaction).map((value, index) => (\n                    // Ensure that value is a valid React renderable element\n                    <td key={index}>{String(value)}</td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UploadTransactions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}